---
- name: report domains for certificate '{{ name }}'
  debug:
    msg: "{{ name }} >> {{ domains |join(' ') }}"

- name: query old letsencrypt certificate '{{ name }}' (ok to fail)
  openssl_certificate_info:
    path: "{{ cert_subdir }}/cert.pem"
  ignore_errors: true
  register: old_cert_info
  when: existing == 'autoremove'

- name: remove old letsencrypt certificate '{{ name }}' (ok to fail)
  command:
    argv:
      - "{{ certbot_script }}"
      - delete
      - --cert-name
      - "{{ name }}"
      - --non-interactive
    removes: "{{ cert_subdir }}"
  ignore_errors: true
  vars:
    new_domains: "{{ domains |sort |join(',') }}"
    old_domains: "{{ old_cert_info.subject_alt_name
                   | default([])
                   | map('replace','DNS:','')
                   | sort
                   | join(',') }}"
    autoremove: "{{ existing == 'autoremove' and new_domains != old_domains }}"
  when: existing == 'remove' or autoremove

- name: update letsencrypt certificate '{{ name }}'
  command:
    argv:
      - "{{ certbot_script }}"
      - certonly
      - --dns-cloudflare
      - --cert-name
      - "{{ name }}"
      - --domains
      - "{{ domains |join(',') }}"
      - --non-interactive
      # - --dry-run
    creates: "{{ omit if existing == 'update' else cert_subdir }}"
  register: _certonly_result
  changed_when:
    - _certonly_result.stdout |d('') is not match('skipped, since')
    - _certonly_result.stderr |d('') is not search('Keeping the existing certificate')
  until: _certonly_result is successful
  tags: cert_cf_renew_cert

- name: fix permissions of the private key '{{ name }}'
  file:
    path: "{{ cert_subdir }}/privkey.pem"
    group: "{{ certbot_group }}"
    ## not setting state, but 'link' is assumed
    mode: 'o='  # disable others (as required by e.g. postgresql server)
  tags: cert_cf_renew_cert
...
