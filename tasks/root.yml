---
- name: add certbot ppa repository
  apt_repository:
    repo: ppa:certbot/certbot
    codename: "{{ ansible_lsb.codename }}"
    filename: certbot
    mode: 0644
    update_cache: true
  when:
    - ansible_lsb.release is version('20.04','<')
  tags: cert_cf_install

- name: install certbot packages
  apt:
    name:
      - certbot
      - python3-certbot-dns-cloudflare
      - python3-pip  # just in case
      - ssl-cert     # for ssl-cert unix group
    install_recommends: false
  tags: cert_cf_install


- name: create unix group for letsencrypt certificate access
  group:
    name: "{{ certbot_group }}"
    state: present
  tags: cert_cf_group

- name: grant certbot group access to letsencrypt files
  file:
    path: "{{ certbot_dir }}/{{ item }}"
    state: directory
    owner: root
    group: "{{ certbot_group }}"
    mode: 0750
  loop:
    - archive
    - live
  tags: cert_cf_group

- name: create directory for hooks
  file:
    path: "{{ certbot_dir }}/renewal-hooks/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  loop:
    - pre
    - post
    - deploy
  tags:
    - cert_cf_group
    - cert_replica_group

- name: create post-renewal hook to fix permissions of private keys
  copy:
    dest: "{{ hook_dir }}/post/privkey-permissions"
    ## xargs option '-r' means '--no-run-if-empty'
    content: |
      #!/bin/bash
      find {{ archive_dir }} -name privkey*.pem | xargs -r chgrp {{ certbot_group }}
      find {{ archive_dir }} -name privkey*.pem | xargs -r chmod g+r,o=
    owner: root
    group: root
    mode: 0750
  vars:
    archive_dir: "{{ certbot_dir }}/archive"
    hook_dir: "{{ certbot_dir }}/renewal-hooks"
  tags:
    - cert_cf_group
    - cert_replica_group


- name: create cloudflare configuration for certbot
  copy:
    dest: "{{ certbot_dir }}/dns-cloudflare.ini"
    content: |
      dns_cloudflare_email = {{ certbot_cloudflare_email }}
      dns_cloudflare_api_key = {{ certbot_cloudflare_api_key }}
    owner: root
    mode: 0600
  tags: cert_cf_config

- name: create certbot configuration
  copy:
    dest: "{{ certbot_dir }}/cli.ini"
    content: |
      # Because we are using logrotate for greater flexibility,
      # disable the internal certbot logrotation.
      max-log-backups = 0
      dns-cloudflare-credentials = {{ certbot_dir }}/dns-cloudflare.ini
      server = https://{{ certbot_acme_server }}/directory
    owner: root
    mode: 0600
  tags: cert_cf_config


- name: setup letsencrypt account registration
  include_tasks: account.yml
  args:
    apply:
      become: true
      tags: cert_cf_accounts
  vars:
    name: "{{ item.name }}"
    active: "{{ item.active |default(true) |bool }}"
    server: "{{ item.server }}"
    hash: "{{ item.hash }}"
    account_dir: "{{ certbot_dir }}/accounts/{{ server }}/directory/{{ hash }}"
  when:
    - active |bool
    - server == certbot_acme_server
    - certbot_renewal_enable |bool
  loop: "{{ certbot_acme_accounts }}"
  loop_control:
    label: "{{ name }}"
  tags: cert_cf_accounts


- name: produce letsencrypt certificates
  include_tasks: certificate.yml
  args:
    apply:
      become: true
      tags:
        - cert_cf_certificate
        - cert_cf_certs
        - cert_cf_all
  vars:
    name: "{{ item.name }}"
    active: "{{ item.active |default(true) |bool }}"
    domains: "{{ item.domains |flatten }}"
    existing: "{{ item.existing |default('autoremove') }}"
    cert_subdir: "{{ certbot_dir }}/live/{{ name }}"
  when:
    - active |bool
    - certbot_renewal_enable |bool
  loop: "{{ certbot_certificates }}"
  loop_control:
    label: "{{ name }}"
  tags: cert_cf_certs


- name: enable automatic certificate renewals twice daily
  systemd:
    name: certbot.timer
    state: "{{ can_renew |ternary('started', 'stopped') }}"
    enabled: "{{ can_renew |bool }}"
    daemon_reload: true
  vars:
    can_renew: "{{ certbot_renewal_cron_enable |bool }}"
  tags: cert_cf_renewal


- name: fine-tune certbot logs
  copy:
    dest: /etc/logrotate.d/certbot
    content: |
      /var/log/letsencrypt/*.log {
          rotate {{ certbot_max_logs }}
          weekly
          {{ commentout }}compress
          missingok
      }
    force: true
    mode: 0644
  vars:
    commentout: "{{ compressing |ternary('','#') }}"
    compressing: "{{ lin_compress_logs |bool or lin_compress_logs is none }}"
  tags: cert_cf_logs
...
