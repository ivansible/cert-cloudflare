---
- name: install certbot
  import_role:
    name: ivansible.cert_base
    tasks_from: install.yml
  tags: cert_cf_install


- name: create post-renewal hook to fix permissions of private keys
  template:
    src: etc/privkey-permissions.sh
    dest: "{{ certbot_post_dir }}/privkey-permissions"
    mode: 0750
  tags:
    - cert_cf_group
    - cert_replica_group


- name: create cloudflare configuration for certbot
  template:
    src: etc/dns-cloudflare.ini
    dest: "{{ certbot_dir }}/dns-cloudflare.ini"
    mode: 0600
  tags: cert_cf_config

- name: create certbot configuration
  template:
    src: etc/cli.ini
    dest: "{{ certbot_dir }}/cli.ini"
    mode: 0600
  tags: cert_cf_config


- name: setup letsencrypt account registration
  include_tasks: account.yml
  args:
    apply:
      become: true
      tags: cert_cf_accounts
  vars:
    name: "{{ item.name }}"
    active: "{{ item.active |default(true) |bool }}"
    server: "{{ item.server }}"
    hash: "{{ item.hash }}"
    account_dir: "{{ certbot_dir }}/accounts/{{ server }}/directory/{{ hash }}"
  when:
    - active |bool
    - server == certbot_acme_server
    - certbot_renewal_enable |bool
  loop: "{{ certbot_acme_accounts }}"
  loop_control:
    label: "{{ name }}"
  tags: cert_cf_accounts


- name: produce letsencrypt certificates
  include_tasks: certificate.yml
  args:
    apply:
      become: true
      tags:
        - cert_cf_certificate
        - cert_cf_certs
        - cert_cf_all
  vars:
    name: "{{ item.name }}"
    active: "{{ item.active |default(true) |bool }}"
    domains: "{{ item.domains |flatten }}"
    rsa: "{{ item.rsa |default(false) |bool }}"
    existing: "{{ item.existing |default('autoremove') }}"
    cert_subdir: "{{ certbot_live_dir }}/{{ name }}"
    cert_arch_subdir: "{{ certbot_arch_dir }}/{{ name }}"
  when:
    - active |bool
    - certbot_renewal_enable |bool
  loop: "{{ certbot_certificates }}"
  loop_control:
    label: "{{ name }}"
  tags: cert_cf_certs


- name: renew certificates twice daily (using package timer, ok to fail)
  systemd:
    name: certbot.timer
    state: "{{ can_renew |ternary('started', 'stopped') }}"
    enabled: "{{ can_renew |bool }}"
    ## _certbot_changed from imported ivansible.cert_base/install.yml
    daemon_reload: "{{ _certbot_changed |d(false) }}"
  vars:
    cron_enabled: "{{ certbot_renewal_cron_enable |bool }}"
    use_docker: "{{ certbot_use_docker |bool }}"
    can_renew: "{{ cron_enabled and not use_docker }}"
  failed_when: false
  ## mitigate lame change reports in check mode
  register: _renew_timer_task_result
  changed_when:
    - _renew_timer_task_result is changed
    - not ansible_check_mode
  tags: cert_cf_renewal

- name: renew certificates daily (using docker wrapper)
  template:
    src: etc/certbot-renew.sh
    dest: /etc/cron.daily/certbot-renew
    mode: 0755
  notify: reload systemd daemon
  when: certbot_use_docker |bool
  tags: cert_cf_renewal


- name: fine-tune certbot logs
  template:
    src: etc/logrotate.cfg
    dest: /etc/logrotate.d/certbot
    mode: 0644
  vars:
    ## lin_compress_logs: imported from lin-base
    commentout: "{{ compressing |ternary('','#') }}"
    compressing: "{{ lin_compress_logs |bool or lin_compress_logs is none }}"
  tags: cert_cf_logs
...
